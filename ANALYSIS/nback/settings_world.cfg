% WORLD
  debug = 0                                  #(bool) run world in debug mode (if available)
  worldType = NBack                          #(string) world to be used, [Berry, BlockCatch, Logic16, NBack, PathFollow, Test]

% WORLD_BERRY
  allowEatAndMove = 0                        #(bool) if false, and there is an eat output and move output, move outputs will be ignored
                                             #  if true and there is both an eat and move output, eat will happen first, then move.
  alwaysEat = 1                              #(bool) if true, organism will have only two outputs. organism will always attempt eat before moving. If false, there
                                             #  will be a third input for eat which must be activated for the agent to eat
  alwaysStartOnResource = -1                 #(int) all organisms will start on this type of food (-1 = random non-wall start locations)
  evalationTime = 300                        #(int) number of world updates per evaluation (i.e. number of actions each agent can perform per map)
  evaluationsPerGeneration = 1               #(int) The world will be run one the entire population this number of times (useful to correct for chance in world
                                             #  or organism)
  startConfigurations = -1                   #(string) If alwaysStartOn is -1 and no start locations are provided by a map, these will determin inital placment
                                             #  of harvesters.
                                             #  format: x,y,facing,x,y,facing,x,y,facing if value = -1 = all random starts (default); -1 in facing position will
                                             #  pick random facing for that location.
  worldHasWall = 1                           #(bool) if world is being generated randomly (i.e. not loaded from file),
                                             #  does the world have a wall around the edge? (maps must define their own walls)
  worldSizeX = 8                             #(int) width of world if no map files are provided (random map will be generated from initialFoodDistribution)
  worldSizeY = 8                             #(int) height of world if no map files are provided

% WORLD_BERRY_FOOD
  foodTypes = 2                              #(int) how many different types of food (valid values:1,2,3,4,5,6,7,8)
  initialFoodDistribution = -1               #(string) values used to generate world when maps are not loaded.
                                             #  List provides types of foods and probability of that food on each location.
                                             #    1,1,2 = 2/3 1, 1/3 2
                                             #    -1,0,2 = 1/3 random from food types, 1/3 0, 1/3 2
  replace1 = 0                               #(string) when food 1 is eaten, what should replace it?
                                             #  replacement is chosen randomly from this list
                                             #  elements that appear more then once are more likely to be selected
                                             #  -1 will choose randomly from available food types
  replace2 = 0                               #(string) replace rule for food2
  replace3 = -1                              #(string) replace rule for food3
  replace4 = -1                              #(string) replace rule for food4
  replace5 = -1                              #(string) replace rule for food5
  replace6 = -1                              #(string) replace rule for food6
  replace7 = -1                              #(string) replace rule for food7
  replace8 = -1                              #(string) replace rule for food8

% WORLD_BERRY_GEOMETRY
  allowBackstep = 0                          #(bool) if true, harvesters will be able to move backwards
  allowSidestep = 1                          #(bool) if true, harvesters will be able to move sideways (i.e. 90 degrees to facing)
  allowTurn = 0                              #(bool) if true, harvesters will be able to turn(change facing direction)
  directions = 8                             #(int) the number of directions organisms can face
                                             #    i.e. 36 = 10 degree turns, 8 = 45 degree turns, etc.
  maxTurn = 0.125                            #(double) harvesters can turn this amount per world update (i.e. if directions = 16 and maxTurn = .25, then 4 turns
                                             #  are allowed per
                                             #  world update). This is implemented by allowing multipile turn (by 360 / directions degrees) actions in a single world
                                             #  update.
  moveDefault = 1.0                          #(double) distance harvester moves when output is move
  moveMin = 0.0                              #(double) min distance harvester moves every world update (even if output is not move)
  moveMinPerTurn = 0.0                       #(double) min distance harvester moves every time harvester turns (there may be more then one turn in a world update)
  snapTpGrid = 1                             #(bool) if true, harvester will always move to center of nearest space

% WORLD_BERRY_GROUP
  cloneScoreRule = ALL                       #(string) if clones is > 0 what score rule will be applied to the parent organism. ALL = score from all clones(effectivly
                                             #  average), BEST = only the score from the best clone, WORST = only the score from the worst clone. if groupScoreRule
                                             #  is not SOLO this parametdr is ignored.
  clones = 0                                 #(int) evaluation groups will be padded with this number of clones for each harvester. I.e. if group size is 3 and
                                             #  clones is 1, the actual group size will be 6
  groupScoreRule = SOLO                      #(string) how should groups be scored? SOLO = no group scoring. ALL = each group member receives all scores(effectivly
                                             #  average), BEST = each group member receives score of best in group, WORST = each group member receives score of worst
                                             #  in group
  groupSize = 1                              #(int) organisms will be evaluated in groups of this size, the groups will be determined randomly.  
                                             #  If (population size / groupSize) has a remainder, some organisms will be evaluated more then once.
                                             #    -1 indicates to evaluate all organisms at the same time.

% WORLD_BERRY_MAPS
  mapFiles = edlunds.txt                     #(string) list of names of file containing maps (if NONE, random map will be generated) e.g. [World/HarvestXWorld/maps/patch.txt]
  whichMaps = */*                            #(string) list of maps from mapFiles to use to evaluate each harvester, type/name will select named map,
                                             #  * in either position = all,
                                             #  a number = randomly select that number of maps (will fail if there are not enough maps)

% WORLD_BERRY_NAMESPACE
  NameSpace_brain = root::                   #(string) namespace for parameters used to define brain
  NameSpace_group = root::                   #(string) namespace of group to be evaluated

% WORLD_BERRY_SCORE
  hitOtherCost = 0.0                         #(double) cost paid if a move failed because of another harvester being in the way
  hitWallCost = 0.0                          #(double) cost paid if a move failed because of a wall being in the way
  poison0 = 0.0                              #(double) cost for landing on empty
  poison1 = 0.0                              #(double) cost for landing on food1
  poison2 = 0.0                              #(double) cost for landing on food2
  poison3 = 0.0                              #(double) cost for landing on food3
  poison4 = 0.0                              #(double) cost for landing on food4
  poison5 = 0.0                              #(double) cost for landing on food5
  poison6 = 0.0                              #(double) cost for landing on food6
  poison7 = 0.0                              #(double) cost for landing on food7
  poison8 = 0.0                              #(double) cost for landing on food8
  reward1 = 1.0                              #(double) reward for eating food1
  reward2 = 1.0                              #(double) reward for eating food2
  reward3 = 1.0                              #(double) reward for eating food3
  reward4 = 1.0                              #(double) reward for eating food4
  reward5 = 1.0                              #(double) reward for eating food5
  reward6 = 1.0                              #(double) reward for eating food6
  reward7 = 1.0                              #(double) reward for eating food7
  reward8 = 1.0                              #(double) reward for eating food8
  switchCost = 0.0                           #(double) cost paid when switching between food types

% WORLD_BERRY_SENSORS
  downSensorSwitch = 1                       #(bool) can harvesters detect food at their current location?
  perfectSensorSwitch = 1                    #(bool) do harvesters have a perfect sensor? (reqires direction is 4 or 8)
  smellSensorSwitch = 0                      #(bool) do harvesters have a smell sensor?
  visionSensorSwitch = 0                     #(bool) do harvesters have a vision sensor?

% WORLD_BERRY_SENSORS_PERFECT
  perfectSensorDetectsFood = 1               #(bool) can perfect sensor detect food?
  perfectSensorDetectsOther = 0              #(bool) can perfect sensor detect other?
  perfectSensorDetectsWalls = 1              #(bool) can perfect sensor detect walls?
  perfectSensorFile = edlunds_sensors.txt    #(string) file which defines perfect sensor?

% WORLD_BERRY_SENSORS_SMELL
  smellFood = 1                              #(bool) can harvesters detect food with their smell sensor?
  smellOther = 0                             #(bool) can harvesters detect other harvesters with their smell sensor?
  smellSensorArcSize = 180                   #(int) how wide is a smell arc (degrees)
  smellSensorDirections = 0,.25,.5,.75       #(string) what directions can org smell? (if value is < 1, then this value will be multipied by directions)
  smellSensorDistanceMax = 2                 #(int) how far can orgs smell?
  smellWalls = 0                             #(bool) can harvesters detect walls with their smell sensor?
  wallsBlockSmellSensors = 0                 #(bool) if true, objects behind walls can not been smelled (setting to false allows for larger sensors)

% WORLD_BERRY_SENSORS_VISION
  seeFood = 1                                #(bool) can harvesters detect food with their vision sensor?
  seeOther = 0                               #(bool) can harvesters detect other harvesters with their vision sensor?
  seeWalls = 1                               #(bool) can harvesters detect walls with their vision sensor?
  visionSensorArcSize = 5                    #(int) how wide is a vision arc (degrees)
  visionSensorDirections = -2,0,1            #(string) what directions can org see? (if value is < 1, then this value will be multipied by directions)
  visionSensorDistanceMax = 6                #(int) how far can orgs see?
  wallsBlockVisonSensors = 0                 #(bool) if true, objects behind walls can not been seen (setting to false allows for larger sensors)

% WORLD_BERRY_TRIGGERS
  triggerFoodEvents =                        #(string) list of events which will take place when trigger activates
                                             #  T*[num] = all harvesters in the current group gain score of (world updates remaining * num)
                                             #  S[num] = all harvesters gain score of num
                                             #   R[A,B,...] replace A with B (i.e. replace all 2 with 1 can be used to reset map)
                                             #  G[x,y,f,...] = generate f at x,y; if any value == -1 then use random in world range or food range
                                             #  Q = stop running this evaluation
                                             #  rules may be combined with + (i.e. S10+Q)
  triggerFoodLevels =                        #(string) list of levels when food triggers will activate, events will trigger when the associated food drops to or
                                             #  below this level
  triggerFoods =                             #(string) list of foods with triggers, for each food in this list, there must also be a level and event
                                             #  more then one food may be included in a trigger (seperated by +). All food must be <= level in this case

% WORLD_BLOCKCATCH
  paddle = 110011                            #(string) list of 1 (for sensor) and 0 (for non-sensor) used to define the paddle
  patternStartPositions = ALL                #(string) Where should the patters start (and if random, how many times should each pattern be tested)
                                             #  ALL = each pattern will be tested for each possible start position
                                             #  ALL_CLEAR = each pattern will be tested for each possible start position that does not overlap the paddle
                                             #  RANDOM_X = each pattern will be tested X times, starting from a random location (locations may repeat)
                                             #  RANDOM_CLEAR_X = each pattern will be tested X times, starting from a random location that does not overlap the paddle
                                             #  note: with either random method, locations may repeat)
  patternsToCatch = 1L,1R                    #(string) a comma separted list of block patterns to be caught
                                             #  each pattern is followed by a list of at least one L, R or, H. These letters will determine
                                             #  movement (left, right, hold). for example, 101LLRH = pattern 3 wide with a hole in the middle
                                             #  which moves left, left, right, no movement, left, left, right, hold...
                                             #  the letters L and R may be followed by a number, this will allow the pattern to move more faster.
                                             #  patterns may be defined with : to allow for animated patterns (i.e. 10:01L will define a pattern
                                             #  that ossilates between 10 and 01 while moving left.
  patternsToMiss = 11L,11R                   #(string) a comma separted list of block pattern sizes to be missed (see blockPatternsToCatch)
  scoreMethod = ANY_ANY                      #(string) How should score be calculated?
                                             #  ANY_ANY - a hit is defined as any part of the pattern contacting at part of the paddle
                                             #  VISIBLE_ANY - a hit is defined as any visible part of the pattern contacting any part of the paddle
                                             #  VISIBLE_SENSOR - a hit is defined as any visible part of the pattern contacting any sensor on the paddle
                                             #  SUM_ALL_ALL - a hit will be recorded for each part of the pattern that contacts any part of the paddle
                                             #  SUM_VISIBLE_SENSOR - a hit will be recorded for each visible part of the pattern that contacts a sensor on the paddle
                                             #  SUM_VISIBLE_NON_SENSOR - a hit will be recorded for each visible part of the pattern that contacts a non-sensor on
                                             #  the paddle.
                                             #  NOTE: correct and incorrect are calculated diffrently if any of the SUM methods are used, see the README file!
  startYMax = 20                             #(int) highest height patterns can start
  startYMin = 20                             #(int) lowest height patterns can start
  testMutants = 0                            #(int) if > 0, this number of mutants of each agent will be tested
  visualizeBest = -1                         #(int) visualize best scoring organism every visualizeBest generations, excluding generation 0.
                                             #  if -1, do not visualize on steps (this parameter does not effect visualize mode)
  worldXMax = 20                             #(int) max width of world
  worldXMin = 20                             #(int) min width of world

% WORLD_BLOCKCATCH_ANALYZE
  saveBrainStructureAndConnectome = 1        #(bool) 
  saveFlowMatrix = 0                         #(bool) 
  saveFragOverTime = 0                       #(bool) 
  saveStateToState = 1                       #(bool) 
  save_R_FragMatrix = 0                      #(bool) 

% WORLD_BLOCKCATCH_NAMES
  brainName = root::                         #(string) name of brains used to control organisms
  groupName = root::                         #(string) name of group to be evaluated

% WORLD_LOGIC16
  brainUpdates = 1                           #(int) Number of brain updates run for each world input.
  evaluationsPerGeneration = 1               #(int) Number of times to test each organism per generation (useful with non-deterministic brains)
  logicShuffleMethod = NONE                  #(string) should the logic associated with each output change over time,
                                             #  NONE = no, constent environment
                                             #  RANDOM = randomly reasign which logic is expected by each output
                                             #        (irregularlay changing environment)
                                             #  SLIDE = slide the output expectations one position to the right and wrap the last value
                                             #        (regularlay changing environment)
  logicShuffleTime = 100                     #(int) if logicShuffleMethod is not NONE, how often should the environment shuffle?
  normalizeScore = 1                         #(bool) if true, scores will be normalized between 0 and 1. if false, every correct output will add 1 to score - each
                                             #  test logic will add up to 4.
  resetBrainBetweenInputs = 1                #(bool) call brain reset between inputs (each brain is tested with all four possible inputs - 00, 01, 10, 11, is brain
                                             #  reset between each input?)
  testLogic = 1,2,4,6,7,8,9,11,13,14         #(string) comma seperated list of logic used to test each organism. Values may be repeated in this list.
                                             #  Values are:
                                             #     0: FALSE       1: A NOR B      2: !A AND B    3: !A 
                                             #     4: A AND !B    5: !B           6: A XOR B     7: A NAND B 
                                             #     8: A AND B     9: A NXOR B    10: B          11: !A OR B 
                                             #    12: A          13: A OR !B     14: A OR B     15: TRUE

% WORLD_LOGIC16_NAMES
  brainName = root::                         #(string) namespace for parameters used to define brain
  groupName = root::                         #(string) name of group to be evaluated

% WORLD_NBACK
  NsList = 1,2,3,4:-1                        #(string) comma seperated list of n values followed by ':' and a time
                                             #  more then one list can be defined seperated by '|'. The last list time must be -1 (i.e. forever)
                                             #  eg: 1,2,3:100|2,3,4:-1
  RMult = 0                                  #(int) score R multiplier
  brainNameSpace = root::                    #(string) namespace for parameters used to define brain
  delayOutputEval = 0                        #(int) generation delay for ouput evalutation
  evaluationsPerGeneration = 25              #(int) Number of times to evaluate each agent per generation
  groupNameSpace = root::                    #(string) namespace of group to be evaluated
  scoreMult = 1                              #(int) score multiplier
  testMutants = 0                            #(int) if > 0, this number of mutants of each agent will be tested
  testsPerEvaluation = 25                    #(int) Number of times to test each agent per evaluation
  tritInputs = 0                             #(bool) if false (defaut) then inputs to brain are 0 or 1. If true, inputs are -1,0,1

% WORLD_NBACK_ANALYZE
  saveBrainStructureAndConnectome = 1        #(bool) 
  saveFlowMatrix = 0                         #(bool) 
  saveFragOverTime = 0                       #(bool) 
  saveStateToState = 1                       #(bool) 
  saveStates = 1                             #(bool) 
  save_R_FragMatrix = 0                      #(bool) 

% WORLD_PATHFOLLOW
  addFlippedMaps = 1                         #(bool) if addFlippedMaps, than a copy of each loaded map flipped horizontaly will be added to the maps list
  clearVisted = 1                            #(bool) if clearVisted is true, then world markers will be erased when a location is occupied and visting this location
                                             #  again will incure the emptySpace cost.
                                             #  note that map values > 1, i.e. turn signals and end of map signal are set to 1 (forward signal) when visted to provide
                                             #  time to take a turn action.
  emptySpaceCost = 0.25                      #(double) score lost anytime agent is on an empty location (including non-empty locations that become empty)
  evaluationsPerGeneration = 1               #(int) how many times should each organism be tested in each generation? (useful for non-deterministic brains)
  extraSteps = 50                            #(int) how many many steps, beyond those needed to perfectly solve the map, does the agent get to solve each map?
  inputMode = single                         #(string) how are inputs delived from world to organism?
                                             #  single: 1 input : -1 (off), 0(forward), or [1, signValueMax](turn symbol)
                                             #  mixed:  4 inputs: offPathBit,onPathBit,(0(not turn), or [1,signValueMax](turn symbol))
                                             #  binary: 3+ inputs: offPathBit,onPathBit,onTurnBit, bits for turn symbol(0 if not turn)
  mapNames = ../code/World/PathFollowWorld/path1.txt,../code/World/PathFollowWorld/path2.txt #(string) list of text files with paths. in path files, X = start position,
                                             #  0 = empty, 1 = forward path, 2 = turn right, 3 = turn right, 4 = end of path
  randomTurnSymbols = -1                     #(int) if 1, random symbols pairs will be determined per map (and per eval) for left and right.
                                             #  symbols will be the same for all agents in a generation.
                                             #  if 0, symbolValueMax is ignored and 1 and 2  (or 01 and 10) are always used
                                             #  if -1 all possible symbols pairs will be used per map (and per eval) for left and right
  swapSymbolsAfter = 1.0                     #(double) if swapSignals < 1.0, than the turn symbols will be swapped after (minimum number of steps * swapSignalsAfter)
  turnSymbolsCount = 2                       #(int) number of symbols that will be used when generating turn symbols.
                                             #  if inputMode is binary it is best if this value is a power of 2

% WORLD_PATHFOLLOW_ANALYZE
  saveBrainStructureAndConnectome = 1        #(bool) 
  saveFlowMatrix = 0                         #(bool) 
  saveFragOverTime = 0                       #(bool) 
  saveStateToState = 1                       #(bool) 
  saveStates = 1                             #(bool) 
  saveVisual = 1                             #(bool) save visualization, even though we are in analyze mode
  save_R_FragMatrix = 0                      #(bool) 

% WORLD_TEST
  evaluationsPerGeneration = 1               #(int) Number of times to test each Genome per generation (useful with non-deterministic brains)
  mode = 0                                   #(int) 0 = bit outputs before adding, 1 = add outputs
  numberOfOutputs = 10                       #(int) number of outputs in this world

% WORLD_TEST_NAMES
  brainNameSpace = root::                    #(string) namespace for parameters used to define brain
  groupNameSpace = root::                    #(string) namespace of group to be evaluated

