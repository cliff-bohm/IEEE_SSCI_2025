% BRAIN
  brainType = WireCube                       #(string) brain to be used, [BiLog, CGP, WireCube]

% BRAIN_BiLog
  hiddenLayerSizeList = NONE                 #(string) what are the lengths of your hidden nodes? (if setting one size for all hidden nodes use a single integer
                                             #  i.e. 4; if you are setting the length of each layer individually use comma seperated integers with no spaces i.e.
                                             #  "3,2,5" ) default=NONE
  inputAlwaysAvailable = 0                   #(bool) are the input nodes available as input to all hidden layers? default=false
  nrOfHiddenLayers = 0                       #(int) how many hidden layers does the brain have? default=0 (this number should match the length of the hidden layer
                                             #  size list)
  nrOfRecurrentNodes = 0                     #(int) how many recurrent nodes does the brain have? default=0
  outputAlwaysAvailable = 0                  #(bool) are the output nodes available as input to all hidden layers? (only enable this if recurrentOutput = true)
                                             #  default=false
  recurrentAlwaysAvailable = 0               #(bool) are the recurrent nodes available as input to all hidden layers? default=false
  recurrentOutput = 0                        #(bool) is the output fed back as input? default=false

% BRAIN_BiLog_MUTATIONS
  mutationRateLogic1 = 0.01                  #(double) chance for a single point mutation to a gates logic per gate
  mutationRateLogic2 = 0.01                  #(double) chance for a double point mutation to a gates logic per gate
  mutationRateLogic3 = 0.01                  #(double) chance for a triple point mutation to a gates logic per gate
  mutationRateLogic4 = 0.01                  #(double) chance for a quadruple point mutation to a gates logic per gate
  mutationRateWires1 = 0.01                  #(double) chance for a single wire mutation per gate
  mutationRateWires2 = 0.01                  #(double) chance for a double wire mutation per gate
  mutation_Program_Filename =                #(string) if a file name is provided, mutation rates will be set using this file
                                             #  The file needs to be in CSV format and must contain the following columns:
                                             #  update,onePerBrain,onePerGate,wire1,wire2,logic1,logic2,logic3,logic4
                                             #  when Global::update = update for each row, each of the mutation parameters
                                             #  will be set to associated values. If the first update is not 0, then the
                                             #  paramters values will be used until the first defined update.
                                             #  An example file is provided: Brain/BiLogBrain/mutation_program.csv
  onePerBrain = -1.0                         #(double) If value is positive, then mutations will be limited to one per brain at this rate per brain.
                                             #  The distribution of mutations will be determined by the ratios of the defined mutation rates.
  onePerGate = -1.0                          #(double) If value is positive, then mutations will be limited to one per gate at this rate per gate.
                                             #  The distribution of mutations will be determined by the ratios of the defined mutation rates.
                                             #  If onePerBrain is set then onePerGate will be ignored
  recordMutationHistory = 0                  #(bool) If true, mutations will be recorded into data and max files. This may generate large data files!

% BRAIN_CGP
  MutationRate_CONST_value = 0.01            #(double) mutation rate const operator value (per op)
  MutationRate_DETGATE_logic = 0.01          #(double) mutation rate for operation inputs
  MutationRate_INPUTS = 0.01                 #(double) mutation rate for operation inputs (per input)
  MutationRate_OPERATION = 0.002             #(double) mutation rate (per gate) to change an operation (includes inputs)
  MutationRate_OUTPUT = 0.002                #(double) mutation rate (per output) to change where an output (or memory) is wired
  MutationRate_RNN_bias = 0.01               #(double) mutation rate (per RNN op) for RNN operator bias
  MutationRate_RNN_weights = 0.01            #(double) mutation rate (per weight) for RNN operator weights
  RNN_biasMaxValue = 1.0                     #(double) mutation rate for operation inputs
  RNN_biasMinValue = -1.0                    #(double) mutation rate for operation inputs
  availableOperators = all                   #(string) which opperators are allowed? all indicates, allow all opperators or, choose from:
                                             #    ADD (a+b), MULT (a*b), SUBTRACT (a-b), DIVIDE(a/b)
                                             #    SIN (sin(a)), COS (sin(a)), GREATER (1 if a > b, else 0), RAND (double[a..b))
                                             #    IF (b is a > 0, else 0), INV (-a), CONST (const)
                                             #    RNN (8 inputs sumed -> tanh) DETGATE (4 in, 1 out, logic lookup)
                                             #  if a list (| seperated) is provided, then each column has it's own availableOperators
  discretizeRecurrent = 0                    #(int) should recurrent nodes be discretized when being copied?
                                             #  if 0, no, leave them be.
                                             #  if 1 then map <= 0 to 0, and > 0 to 1
                                             #  if > then 1, values are mapped to new equally spaced values in range [discretizeRecurrentRange[0]..[1]] such that
                                             #  each bin has the same sized range
                                             #      i.e. if 3 and discretizeRecurrentRange = [-1,1], bin bounderies will be (-1.0,-.333-,.333-,1.0) and resulting
                                             #  values will be (-1.0,0.0,1.0)
                                             #  Note that this process ends up in a skewed mapping. mappings will always include -1.0 and 1.0. even values > 1 will
                                             #  result in remappings that do not have 0
  discretizeRecurrentRange = -1,1            #(string) value range for discretizeRecurrent if discretizeRecurrent > 1
  magnitudeMax = 100.0                       #(double) values generated which are larger then this will by clipped
  magnitudeMin = -100.0                      #(double) values generated which are smaller then this will by clipped
  nrRecurrentNodes = 3                       #(int) number of recurrent nodes
  opsMatixColumns = 4                        #(int) width of the operations matrtix
  opsMatixRows = 4                           #(int) height of the operations matrtix
  readFromOutputs = 1                        #(bool) if true, previous updates outputs will be available as inputs.

% BRAIN_WIRE_CUBE
  T0Layers = 1                               #(int) which layers (up from y = 0) can have T0 connections(input+hidden), -1 indicates all layers
  T1Layers = 1                               #(int) which layers (down from y = max) can have T1 connections(output+hidden), -1 indicates all layers
  chargeMax = 2                              #(int) a wire must have at most this number of charged neghbiors to become charge
  chargeMin = 1                              #(int) a wire must have at least this number of charged neghbiors to become charge
  clearBetweenUpdates = 0                    #(bool) is the brain cleared at the start of each update?
  decayDuration = 1                          #(int) how long decay takes
  initialFillRatio = 0.2                     #(double) ratio of cells set to wire in initialized brains
  mutationRate_addWire = 0.005               #(double) rate per empty cell to change that cell to wire
  mutationRate_eraseWire = 0.025             #(double) rate per wire cell to change that cell to empty
  mutationRate_rewireInput = 0.01            #(double) rate per input to change which cell input connects to
  mutationRate_rewireOutput = 0.01           #(double) rate per output to change which cell output corrects to
  nrRecurrentValues = 0                      #(int) number of recurrent values
  optimizeBrain = 1                          #(bool) if true, brain will be optimized (e.g., skip unconnected wire) before updates are run
                                             #  optimization should have no effect aside from speed of run
  outputMode = 0                             #(int) if 0, brain outputs are generated from final state of T1_cells
                                             #  if 1, brain outputs are average of T1_cells
  saveBrainBehavior = 1                      #(int) if true, brain behavior will be saved for visulization. This may generate a large file!
  size_x = 10                                #(int) width of brain matrix
  size_y = 10                                #(int) height of brain matrix
  size_z = 10                                #(int) depth of brain matrix
  stepsPerUpdate = 12                        #(int) number of matrix steps run for each brain update

% GENOME
  alphabetSize = 256.0                       #(double) alphabet size for genome
  genomeType = Circular                      #(string) genome to be used, [Circular]
  sitesType = char                           #(string) type for sites in genome [char, int, double, bool]

% GENOME_CIRCULAR
  mutationCopyMaxSize = 512                  #(int) maximum size of insertion mutation
  mutationCopyMinSize = 128                  #(int) minimum size of insertion mutation
  mutationCopyRate = 0.00002                 #(double) per site insertion rate
  mutationCrossCount = 3                     #(int) number of crosses when performing crossover (including during recombination)
  mutationDeleteMaxSize = 512                #(int) maximum size of insertion mutation
  mutationDeleteMinSize = 128                #(int) minimum size of insertion mutation
  mutationDeleteRate = 0.00002               #(double) per site deletion rate
  mutationIndelCopyFirst = 1                 #(bool) whether copy or deletion happens first (0 = delete first, 1 = copy first)
  mutationIndelInsertMethod = 0              #(int) where is copied material inserted?
                                             #  0 = place random, 1 = replace deleted sites, 2 = insert just before copied material
  mutationIndelMaxSize = 512                 #(int) maximum size of insertion-deletion mutation
  mutationIndelMinSize = 128                 #(int) minimum size of insertion-deletion mutation
  mutationIndelRate = 0.0                    #(double) per site insertion+deletion (indel) rate. This mutation copies a segment of the genome and deletes a segment
                                             #  of the same size so genome size remains fixed).
  mutationPointOffsetRange = 1.0             #(double) range of PointOffset mutation
  mutationPointOffsetRate = 0.0              #(double) per site point offset mutation rate (site changes in range (+/-)mutationPointOffsetRange)
  mutationPointOffsetUniform = 1             #(bool) if true, offset will be from a uniform distribution, if false, from a normal distribution (where mean is 0
                                             #  and std_dev is mutationPointOffsetRange)
  mutationPointRate = 0.005                  #(double) per site point mutation rate
  sizeInitial = 5000                         #(int) starting size for genome
  sizeMax = 20000                            #(int) if genome is larger then this, mutations will only decrease chromosome size
  sizeMin = 2000                             #(int) if genome is smaller then this, mutations will only increase chromosome size

