% GLOBAL
  initPop = 100                              #(string) initial population to start MABE - this parameter is parsed with .plf syntax as if preceded by "MASTER =
                                             #  ".
                                             #  a number can be used to set the population size to use random default orgs (i.e. 100 is read as "default 100")If
                                             #  a file name with .plf is provided, that population loader file is parsed
  mode = run                                 #(string) mode to run MABE in [run,visualize,analyze]
  outputPrefix = ./                          #(string) Directory and prefix specifying where data files will be written
  randomSeed = 101                           #(int) seed for random number generator, if -1 random number generator will be seeded randomly
  updates = 20000                          #(int) how long the program will run

% ARCHIVIST
  outputMethod = Default                     #(string) output method, [Default, LODwAP]

% ARCHIVIST_DEFAULT
  filePrefix = NONE                          #(string) prefix for files saved by this archivst. "NONE" indicates no prefix.
  popFileColumns =                           #(string) data to be saved into average file (must be values that can generate an average). If empty, MABE will try
                                             #  to figure it out
  realtimeSequence = :10                   #(string) How often to write to realtime data files. (format: x = single value, x-y = x to y, x-y:z = x to y on x,
                                             #  :z = from 0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  snapshotDataSequence = :1000              #(string) How often to save a realtime snapshot data file. (format: x = single value, x-y = x to y, x-y:z = x to y
                                             #  on x, :z = from 0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  snapshotOrganismsSequence = :1000         #(string) How often to save a realtime snapshot genome file. (format: x = single value, x-y = x to y, x-y:z = x to
                                             #  y on x, :z = from 0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  writeMaxFile = 1                           #(bool) Save data to Max file?
  writePopFile = 1                           #(bool) Save data to average file?
  writeSnapshotDataFiles = 1                 #(bool) if true, snapshot data files will be written (with all non genome data for entire population)
  writeSnapshotOrganismsFiles = 1            #(bool) if true, snapshot organisms files will be written (with all organisms for entire population)

% ARCHIVIST_LODWAP
  dataSequence = :100                        #(string) How often to write to data file. (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from
                                             #  0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  filePrefix = NONE                          #(string) prefix for files saved by this archivst. "NONE" indicates no prefix.
  organismsSequence = :1000                  #(string) How often to write genome file. (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from 0
                                             #  to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  pruneInterval = 100                        #(int) How often to attempt to prune LOD and actually write out to files
  terminateAfter = 10                        #(int) how long to run after updates (to get allow time for coalescence)
  writeDataFile = 1                          #(bool) if true, a data file will be written
  writeOrganismsFile = 1                     #(bool) if true, an organisms file will be written

% OPTIMIZER
  optimizer = Tournament                     #(string) optimizer to be used, [Tournament]

% OPTIMIZER_TOURNAMENT
  minimizeError = 0                          #(bool) if true, Tournament Optimizer will select lower optimizeValues
  numberParents = 1                          #(int) number of parents used to produce offspring (each parent will be selected by a unique tournament)
  optimizeValue = DM_AVE[score]              #(string) value to optimize (MTree)
  tournamentSize = 20                         #(int) number of organisims compaired in each tournament

% PARAMETER_FILES
  commentIndent = 45                         #(int) minimum space before comments
  maxLineLength = 160                        #(int) maximum line length

